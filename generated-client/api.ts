/* tslint:disable */
/* eslint-disable */
/**
 * OpenApi specification - Replicator Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: engineering@trolet.ca
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ProductBuilder
 */
export interface ProductBuilder {
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'category'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'handle'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBuilder
     */
    'tags'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'color'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'colorMetaobject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'size'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'sizeMetaobject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'footwearMaterialMetaobject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'genderMetaobject'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'descriptionHtml'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'descriptionMetafield'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'definitionEtat'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'condition'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'dimensions'?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBuilder
     */
    'medias'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'price'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'compareAtPrice'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'sku'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBuilder
     */
    'location'?: string;
}

/**
 * ProductControllerApi - axios parameter creator
 * @export
 */
export const ProductControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a new Shopify product
         * @param {ProductBuilder} productBuilder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct1: async (productBuilder: ProductBuilder, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productBuilder' is not null or undefined
            assertParamExists('createProduct1', 'productBuilder', productBuilder)
            const localVarPath = `/product/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productBuilder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing Shopify product
         * @param {ProductBuilder} productBuilder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (productBuilder: ProductBuilder, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productBuilder' is not null or undefined
            assertParamExists('updateProduct', 'productBuilder', productBuilder)
            const localVarPath = `/product/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productBuilder, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductControllerApi - functional programming interface
 * @export
 */
export const ProductControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a new Shopify product
         * @param {ProductBuilder} productBuilder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct1(productBuilder: ProductBuilder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct1(productBuilder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.createProduct1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing Shopify product
         * @param {ProductBuilder} productBuilder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(productBuilder: ProductBuilder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(productBuilder, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProductControllerApi.updateProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProductControllerApi - factory interface
 * @export
 */
export const ProductControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a new Shopify product
         * @param {ProductBuilder} productBuilder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct1(productBuilder: ProductBuilder, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createProduct1(productBuilder, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing Shopify product
         * @param {ProductBuilder} productBuilder 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(productBuilder: ProductBuilder, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateProduct(productBuilder, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProductControllerApi - object-oriented interface
 * @export
 * @class ProductControllerApi
 * @extends {BaseAPI}
 */
export class ProductControllerApi extends BaseAPI {
    /**
     * 
     * @summary Create a new Shopify product
     * @param {ProductBuilder} productBuilder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public createProduct1(productBuilder: ProductBuilder, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).createProduct1(productBuilder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing Shopify product
     * @param {ProductBuilder} productBuilder 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductControllerApi
     */
    public updateProduct(productBuilder: ProductBuilder, options?: RawAxiosRequestConfig) {
        return ProductControllerApiFp(this.configuration).updateProduct(productBuilder, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TestControllerApi - axios parameter creator
 * @export
 */
export const TestControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCreate: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/testcreate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testFetch: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/testfetch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TestControllerApi - functional programming interface
 * @export
 */
export const TestControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TestControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async test(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.test(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestControllerApi.test']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testCreate(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testCreate(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestControllerApi.testCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async testFetch(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.testFetch(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TestControllerApi.testFetch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TestControllerApi - factory interface
 * @export
 */
export const TestControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TestControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        test(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.test(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testCreate(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.testCreate(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        testFetch(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.testFetch(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TestControllerApi - object-oriented interface
 * @export
 * @class TestControllerApi
 * @extends {BaseAPI}
 */
export class TestControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public test(options?: RawAxiosRequestConfig) {
        return TestControllerApiFp(this.configuration).test(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public testCreate(options?: RawAxiosRequestConfig) {
        return TestControllerApiFp(this.configuration).testCreate(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TestControllerApi
     */
    public testFetch(options?: RawAxiosRequestConfig) {
        return TestControllerApiFp(this.configuration).testFetch(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TokenControllerApi - axios parameter creator
 * @export
 */
export const TokenControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Rotates token value, to be called every month on the first.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/rotate-key`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenControllerApi - functional programming interface
 * @export
 */
export const TokenControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Rotates token value, to be called every month on the first.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProduct(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProduct(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TokenControllerApi.createProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TokenControllerApi - factory interface
 * @export
 */
export const TokenControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Rotates token value, to be called every month on the first.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProduct(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.createProduct(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenControllerApi - object-oriented interface
 * @export
 * @class TokenControllerApi
 * @extends {BaseAPI}
 */
export class TokenControllerApi extends BaseAPI {
    /**
     * 
     * @summary Rotates token value, to be called every month on the first.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenControllerApi
     */
    public createProduct(options?: RawAxiosRequestConfig) {
        return TokenControllerApiFp(this.configuration).createProduct(options).then((request) => request(this.axios, this.basePath));
    }
}



